{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/sbb/Desktop/Tinnus/hearing-frontend/src/providers/ModalProvider.tsx"],"sourcesContent":["'use client'\nimport React, {createContext, ReactNode, useContext, useState} from 'react';\n\ninterface IModalProps {\n    isOpen: boolean;\n    modalContent: ReactNode | null;\n    openModal: (content: ReactNode) => void;\n    closeModal: () => void;\n}\n\nconst ModalContext = createContext<IModalProps | undefined>(undefined)\n\nconst ModalProvider = ({children}: Readonly<{children: ReactNode}>) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [modalContent, setModalContent] = useState<ReactNode | null>(null);\n\n    const openModal = (content: ReactNode) => {\n        setModalContent(content);\n        setIsOpen(true);\n    }\n    const closeModal = () => {\n        setModalContent(null);\n        setIsOpen(false);\n    }\n\n    return (\n        <ModalContext.Provider value={{isOpen, modalContent, openModal, closeModal }} >\n            {children}\n        </ModalContext.Provider>\n    );\n};\n\nexport default ModalProvider;\n\nexport const useModal = (): IModalProps => {\n    const context = useContext(ModalContext);\n\n    if (!context) {\n        throw new Error('useModal must be used within a ModalProvider');\n    }\n\n    return context;\n};\n"],"names":[],"mappings":";;;;;AACA;AADA;;;AAUA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA2B;AAE5D,MAAM,gBAAgB,CAAC,EAAC,QAAQ,EAAkC;IAC9D,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IAEnE,MAAM,YAAY,CAAC;QACf,gBAAgB;QAChB,UAAU;IACd;IACA,MAAM,aAAa;QACf,gBAAgB;QAChB,UAAU;IACd;IAEA,qBACI,8OAAC,aAAa,QAAQ;QAAC,OAAO;YAAC;YAAQ;YAAc;YAAW;QAAW;kBACtE;;;;;;AAGb;uCAEe;AAER,MAAM,WAAW;IACpB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,CAAC,SAAS;QACV,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO;AACX","debugId":null}}]
}